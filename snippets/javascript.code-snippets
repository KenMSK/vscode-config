{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // "Print to console": {
  // "scope": "javascript", "prefix": "log", "body": [	"('$1');", ],	"description": "Log"
  // }

  "Debug to console": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "debug",
    "body": ["console.log('DEBUG!!! $1 <${RANDOM}>', {$2}, '{$2}')"],
    "description": "Log Debug Message to console"
  },
  "simple-uuid": {
    "prefix": "uuid",
    "body": "${UUID}"
  },
  "HEX Only uuid": {
    "prefix": "uuidHex",
    "body": "${UUID/([^-]*|)([-])?/${1:/upcase}/g}"
  },
  "TryCatchTemplate": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "TryCatchError",
    "body": [
      "try {",
      "// ${1:Task To Perform}",
      "$2",
      "} catch (error) {",
      "  $3",
      "  console.error('Err-id:$RANDOM ,Error when: $1', error)",
      "}$4"
    ],
    "description": "Create a standard try catch block"
  },
  "If() Clipboard": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "ifp",
    "body": ["if($1)", "{", "$CLIPBOARD", "}"],
    "description": "Wrap logic in IF statement"
  },

  "Wrap with <>": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "wraptag",
    "body": ["<$1>", "    ${CLIPBOARD}", "</>"]
  },

  "React Functional Component": {
    "scope": "typescriptreact",
    "prefix": "rfc",
    "body": [
      "type ${1}PropType = {${2}}",
      "export const ${1:ComponentName}:",
      "React.FunctionComponent<${1}PropType> = ({${2/(:[^,]+)/ /g}}) => {",
      "${3:/* Computational Logic */}",
      "  return (<>",
      "${4}",
      "  </>)",
      "}${5}"
    ],
    "description": "FC Template Snippet"
  },

  "React Functional Component(jsx)": {
    "scope": "javascriptreact",
    "prefix": "rfc",
    "body": [
      "export function ${1:ComponentName}(",
      "{${2:/* Props */}}){",
      "${3:/* Computational Logic */}",
      "  return (<>",
      "${4}",
      "  </>)",
      "}${5}",
      "// <$1 ${2/([^,:]+)([,\\s]*|)/$1={$1} /g}/>"
    ],
    "description": "FC Template Snippet"
  },
  "React Functional Component Clipboard": {
    "scope": "typescriptreact",
    "prefix": "rfcp",
    "body": [
      "type ${1}PropType = {${2:/* Simple Types */}}",
      "export const ${1:ComponentName}:",
      "React.FunctionComponent<${1}PropType> = ({${2/(:[^,]+)/ /g}}) => {",
      "${3:/* Computational Logic */}",
      "  return (<>",
      "    ${CLIPBOARD}",
      "  </>)",
      "}",
      "// <$1 ${2/([^,:]+)([:][^,:]+)*([,\\s]*|)/$1={$1} /g}/>"
    ],
    "description": "Wrap Clipboard content as Component"
  },
  "React Use State": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "ust",
    "body": [
      "const [${1:stateVar}, set${1/^([a-z])/${1:/upcase}/}] = useState(${2:/* InitialState */})"
    ]
  },
  "React Use Memo": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "umem",
    "body": [
      "const ${1:memoValue} = useMemo(()=>{",
      "${2:/* logic */}",
      "return ${3:undefined}",
      "},[$4])"
    ]
  },
  "React Use Callback": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "ucall",
    "body": [
      "const ${1:memoizedFunction} = useCallback(",
      "($2)=>{$3}",
      ", [$4])"
    ]
  },
  "React Use Context": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "ucon",
    "body": ["const { $2 } = useContext($1)"]
  },
  "Comment Trace code": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "tracecode",
    "body": ["// !trace: $1"]
  },
  "WrapTrim": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "wrapTrim",
    "body": ["$1${CLIPBOARD/^[ \t]+//}$1"]
  },

  "React use Query": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "uque",
    "body": [
      "const ${1:varName} = useQuery(",
      "\"${2:name}-${UUID}\",",
      "${3:function}",
      "{ enabled: ${4:true} }",
      ")"
    ]
  }
}
